import torch
import torch.nn as nn

class StickBreakingProcess(nn.Module):
    def __init__(self, alpha):
        """
        Stick-Breaking Process for DPMM cluster assignments.
        Parameters:
            alpha (float): Concentration parameter controlling the number of clusters.
        """
        super(StickBreakingProcess, self).__init__()
        self.alpha = alpha

    def forward(self, z):
        """
        Perform stick-breaking to generate cluster weights dynamically.
        Parameters:
            z (torch.Tensor): Input tensor (e.g., latent variables or cluster features).
        Returns:
            torch.Tensor: Cluster weights dynamically generated by stick-breaking.
        """
        # Sample Beta distribution for stick lengths
        beta_dist = torch.distributions.Beta(1, self.alpha)
        betas = beta_dist.sample(z.shape[:-1]).to(z.device)  # Shape of cluster assignments
        
        # Stick-breaking formula
        remaining_stick = torch.cumprod(1 - betas, dim=-1)  # Remaining stick lengths
        cluster_weights = betas * torch.cat([torch.ones_like(remaining_stick[:, :1]), remaining_stick[:, :-1]], dim=-1)
        
        return cluster_weights
